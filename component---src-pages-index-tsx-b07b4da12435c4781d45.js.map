{"version":3,"sources":["webpack:///./src/components/blog-item.tsx","webpack:///./src/pages/index.tsx"],"names":["BlogItem","source","frontmatter","excerpt","useIntl","locale","formatMessage","data","getTags","useCallback","site","siteMetadata","tags","filter","tag","split","includes","key","className","data-testid","to","path","title","dayjs","date","format","id","map","query","Home","useEffect","changeLocale","handleAvatarClick","window","open","githubUrl","src","allGithubData","edges","node","viewer","avatarUrl","onClick","alt","href","rel","target","name","allMarkdownRemark","sort","a","b","Date","parse","reduce","acc","cur"],"mappings":"kwBA4EeA,EAjDqB,SAAC,GAAyC,QAAvCC,OAAUC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,QAAgB,EAC1CC,oBAA1BC,EADoE,EACpEA,OAAQC,EAD4D,EAC5DA,cACVC,EAAO,OAcPC,EAAUC,uBACd,SAACF,GAAD,OAAwBA,EAAKG,KAAKC,aAAaC,KAAKC,QAAO,SAAAC,GAAG,OAAIZ,EAAYU,KAAKG,MAAM,KAAKC,SAASF,EAAIG,UAC3G,CAACV,IAGH,OACE,yBAAKW,UAAU,oBACb,kBAAC,OAAD,CACEC,cAAY,QACZD,UAAU,kDACVE,GAAE,IAAMf,EAASH,EAAYmB,MAE5BnB,EAAYoB,OAEf,yBAAKJ,UAAU,uDACb,yBAAKA,UAAU,qBACZK,IAAMrB,EAAYsB,MAChBnB,OAAOA,GACPoB,OAAOnB,EAAc,CAAEoB,GAAI,kBAEhC,yBAAKR,UAAU,2BACZV,EAAQD,GAAMoB,KAAI,SAAAb,GAAG,OACpB,yBAAKG,IAAKH,EAAIG,IAAKC,UAAS,OAASJ,EAAII,WACtCZ,EAAc,CAAEoB,GAAIZ,EAAIG,YAKjC,yBAAKC,UAAU,QAAQf,K,YCkChByB,GAFEC,UArDa,SAAC,GAAa,IAAXtB,EAAW,EAAXA,KAAW,EACNH,oBAA1BE,EADgC,EAChCA,cAAeD,EADiB,EACjBA,OACvByB,qBAAU,WACRC,uBAAa1B,KACZ,CAACA,IAEJ,IAAM2B,EAAoBvB,uBAAY,WACpCwB,OAAOC,KAAK3B,EAAKG,KAAKC,aAAawB,UAAW,YAC7C,IAEH,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,6BAASjB,UAAU,QACjB,yBAAKA,UAAU,0BACb,yBACEA,UAAU,gEACVkB,IAAK7B,EAAK8B,cAAcC,MAAM,GAAGC,KAAKhC,KAAKiC,OAAOC,UAClDC,QAASV,EACTW,IAAI,YAGR,yBAAKzB,UAAU,qCACb,0BAAMA,UAAU,sBACbZ,EAAc,CAAEoB,GAAI,eADvB,IAGE,uBACEkB,KAAMrC,EAAKG,KAAKC,aAAawB,UAC7BU,IAAI,aACJC,OAAO,SACP5B,UAAU,2BAETX,EAAK8B,cAAcC,MAAM,GAAGC,KAAKhC,KAAKiC,OAAOO,OAGlD,0BAAM7B,UAAU,sBAAsBZ,EAAc,CAAEoB,GAAI,kBAG9D,6BAASR,UAAU,yBAChBX,EAAKyC,kBAAkBV,MACrBW,MAAK,SAACC,EAAGC,GAAJ,MACJ,CAACD,EAAEX,KAAKrC,YAAYsB,KAAM2B,EAAEZ,KAAKrC,YAAYsB,MAAMG,IAAIyB,KAAKC,OAAOC,QAAO,SAACC,EAAKC,GAAN,OAAcA,EAAMD,QAE/F5B,KAAI,gBAAGY,EAAH,EAAGA,KAAH,OACH,yBAAKtB,IAAKsB,EAAKb,GAAIR,UAAU,OAAOC,cAAY,QAC9C,kBAAC,EAAD,CAAUlB,OAAQsC,WAUX","file":"component---src-pages-index-tsx-b07b4da12435c4781d45.js","sourcesContent":["import dayjs from 'dayjs';\nimport { Link, useStaticQuery, graphql } from 'gatsby';\nimport { useIntl } from 'gatsby-plugin-intl';\nimport React, { FC, useCallback } from 'react';\nimport { Tag } from '@models';\n\nexport interface BlogItemProps {\n  source: {\n    id: string;\n    frontmatter: {\n      date: string;\n      path: string;\n      title: string;\n      tags: string;\n    };\n    excerpt: string;\n  };\n}\n\nexport interface BlogItemData {\n  site: {\n    siteMetadata: {\n      tags: Tag[];\n    };\n  };\n}\n\nconst BlogItem: FC<BlogItemProps> = ({ source: { frontmatter, excerpt } }) => {\n  const { locale, formatMessage } = useIntl();\n  const data = useStaticQuery<BlogItemData>(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            tags {\n              key\n              className\n            }\n          }\n        }\n      }\n    `\n  );\n  const getTags = useCallback(\n    (data: BlogItemData) => data.site.siteMetadata.tags.filter(tag => frontmatter.tags.split(',').includes(tag.key)),\n    [data]\n  );\n\n  return (\n    <div className='grid grid-cols-1'>\n      <Link\n        data-testid='title'\n        className='text-pink-700 text-xl md:text-2xl font-semibold'\n        to={`/${locale}${frontmatter.path}`}\n      >\n        {frontmatter.title}\n      </Link>\n      <div className='flex flex-col text-sm text-pink-700 text-opacity-75'>\n        <div className='mb-2 sm:mb-0 mr-3'>\n          {dayjs(frontmatter.date)\n            .locale(locale)\n            .format(formatMessage({ id: 'date_format' }))}\n        </div>\n        <div className='flex flex-row flex-wrap'>\n          {getTags(data).map(tag => (\n            <div key={tag.key} className={`tag ${tag.className}`}>\n              {formatMessage({ id: tag.key })}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className='pt-1'>{excerpt}</div>\n    </div>\n  );\n};\n\nexport default BlogItem;\n","import Layout from '@components/layout';\nimport { graphql } from 'gatsby';\nimport { changeLocale, useIntl } from 'gatsby-plugin-intl';\nimport React, { FC, useEffect, useCallback } from 'react';\nimport BlogItem from '@components/blog-item';\nimport SEO from '@components/seo';\nimport { Tag } from '@models';\n\nexport interface HomeProps {\n  data: {\n    site: {\n      siteMetadata: {\n        author: string;\n        githubUrl: string;\n        tags: Tag[];\n      };\n    };\n    allMarkdownRemark: {\n      edges: {\n        node: {\n          id: string;\n          excerpt: string;\n          frontmatter: {\n            date: string;\n            path: string;\n            title: string;\n            tags: string;\n          };\n        };\n      }[];\n    };\n    allGithubData: {\n      edges: {\n        node: {\n          data: {\n            viewer: {\n              name: string;\n              avatarUrl: string;\n            };\n          };\n        };\n      }[];\n    };\n  };\n}\n\ntype SiteData = Pick<HomeProps['data'], 'site'>['site'];\ntype AllMarkdownRemark = Pick<HomeProps['data'], 'allMarkdownRemark'>['allMarkdownRemark'];\ntype AllGithubData = Pick<HomeProps['data'], 'allGithubData'>['allGithubData'];\n\nconst Home: FC<HomeProps> = ({ data }) => {\n  const { formatMessage, locale } = useIntl();\n  useEffect(() => {\n    changeLocale(locale);\n  }, [locale]);\n\n  const handleAvatarClick = useCallback(() => {\n    window.open(data.site.siteMetadata.githubUrl, '_blank');\n  }, []);\n\n  return (\n    <Layout>\n      <SEO />\n      <section className='flex'>\n        <div className='flex items-center pr-2'>\n          <img\n            className='p-0 m-0 w-10 h-10 md:w-12 md:h-12 rounded-full cursor-pointer'\n            src={data.allGithubData.edges[0].node.data.viewer.avatarUrl}\n            onClick={handleAvatarClick}\n            alt='avatar'\n          />\n        </div>\n        <div className='pl-2 grid grid-cols-1 grid-rows-2'>\n          <span className='text-xs md:text-sm'>\n            {formatMessage({ id: 'headline_1' })}\n            &nbsp;\n            <a\n              href={data.site.siteMetadata.githubUrl}\n              rel='noreferrer'\n              target='_blank'\n              className='underline text-pink-700'\n            >\n              {data.allGithubData.edges[0].node.data.viewer.name}\n            </a>\n          </span>\n          <span className='text-xs md:text-sm'>{formatMessage({ id: 'headline_2' })}</span>\n        </div>\n      </section>\n      <section className='grid grid-cols-1 mt-6'>\n        {data.allMarkdownRemark.edges\n          .sort((a, b) =>\n            [a.node.frontmatter.date, b.node.frontmatter.date].map(Date.parse).reduce((acc, cur) => cur - acc)\n          )\n          .map(({ node }) => (\n            <div key={node.id} className='mb-6' data-testid='post'>\n              <BlogItem source={node} />\n            </div>\n          ))}\n      </section>\n    </Layout>\n  );\n};\n\nexport default Home;\n\nexport const query = graphql`\n  query {\n    allGithubData {\n      edges {\n        node {\n          data {\n            viewer {\n              avatarUrl\n              email\n              login\n              name\n            }\n          }\n        }\n      }\n    }\n\n    site {\n      siteMetadata {\n        author\n        githubUrl\n        tags {\n          key\n          className\n        }\n      }\n    }\n\n    allMarkdownRemark(filter: {}) {\n      edges {\n        node {\n          id\n          frontmatter {\n            date\n            path\n            title\n            tags\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}