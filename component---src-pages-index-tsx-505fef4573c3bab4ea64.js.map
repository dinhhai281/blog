{"version":3,"sources":["webpack:///./src/components/blog-item.tsx","webpack:///./src/pages/index.tsx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["BlogItem","frontmatter","excerpt","tags","useIntl","locale","formatMessage","className","data-testid","to","path","title","dayjs","date","format","id","map","tag","key","query","Home","data","useEffect","changeLocale","handleAvatarClick","useCallback","window","open","site","siteMetadata","githubUrl","getBlogTags","filter","split","includes","src","allGithubData","edges","node","viewer","avatarUrl","onClick","alt","href","rel","target","name","allMarkdownRemark","sort","a","b","Date","parse","reduce","acc","cur","rest","source","excluded","i","sourceKeys","Object","keys","length","indexOf"],"mappings":"8MA2CeA,EA/BqB,SAAC,GAAmC,IAAjCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAAW,EACpCC,oBAA1BC,EAD8D,EAC9DA,OAAQC,EADsD,EACtDA,cAEhB,OACE,yBAAKC,UAAU,oBACb,kBAAC,OAAD,CACEC,cAAY,QACZD,UAAU,kDACVE,GAAE,IAAMJ,EAASJ,EAAYS,MAE5BT,EAAYU,OAEf,yBAAKJ,UAAU,uDACb,yBAAKA,UAAU,qBACZK,IAAMX,EAAYY,MAChBR,OAAOA,GACPS,OAAOR,EAAc,CAAES,GAAI,kBAEhC,yBAAKR,UAAU,2BACZJ,EAAKa,KAAI,SAAAC,GAAG,OACX,yBAAKC,IAAKD,EAAIC,IAAKX,UAAS,OAASU,EAAIV,WACtCD,EAAc,CAAES,GAAIE,EAAIC,YAKjC,yBAAKX,UAAU,QAAQL,K,wBCyDhBiB,GAFEC,UA3Da,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAAW,EACNjB,oBAA1BE,EADgC,EAChCA,cAAeD,EADiB,EACjBA,OACvBiB,qBAAU,WACRC,uBAAalB,KACZ,CAACA,IAEJ,IAAMmB,EAAoBC,uBAAY,WACpCC,OAAOC,KAAKN,EAAKO,KAAKC,aAAaC,UAAW,YAC7C,IAEGC,EAAcN,uBAClB,SAACxB,GAAD,OACEoB,EAAKO,KAAKC,aAAa1B,KAAK6B,QAAO,SAAAf,GAAG,OAAIhB,EAAYE,KAAK8B,MAAM,KAAKC,SAASjB,EAAIC,UACrF,CAACG,IAGH,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,6BAASd,UAAU,QACjB,yBAAKA,UAAU,0BACb,yBACEA,UAAU,gEACV4B,IAAKd,EAAKe,cAAcC,MAAM,GAAGC,KAAKjB,KAAKkB,OAAOC,UAClDC,QAASjB,EACTkB,IAAI,YAGR,yBAAKnC,UAAU,qCACb,0BAAMA,UAAU,sBACbD,EAAc,CAAES,GAAI,eADvB,IAGE,uBACE4B,KAAMtB,EAAKO,KAAKC,aAAaC,UAC7Bc,IAAI,aACJC,OAAO,SACPtC,UAAU,2BAETc,EAAKe,cAAcC,MAAM,GAAGC,KAAKjB,KAAKkB,OAAOO,OAGlD,0BAAMvC,UAAU,sBAAsBD,EAAc,CAAES,GAAI,kBAG9D,6BAASR,UAAU,yBAChBc,EAAK0B,kBAAkBV,MACrBW,MAAK,SAACC,EAAGC,GAAJ,MACJ,CAACD,EAAEX,KAAKrC,YAAYY,KAAMqC,EAAEZ,KAAKrC,YAAYY,MAAMG,IAAImC,KAAKC,OAAOC,QAAO,SAACC,EAAKC,GAAN,OAAcA,EAAMD,QAE/FtC,KAAI,oBAAGsB,KAAQvB,EAAX,EAAWA,GAAOyC,ECnFlB,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIvC,EAAKyC,EAFLd,EAAS,GACTe,EAAaC,OAAOC,KAAKL,GAG7B,IAAKE,EAAI,EAAGA,EAAIC,EAAWG,OAAQJ,IACjCzC,EAAM0C,EAAWD,GACbD,EAASM,QAAQ9C,IAAQ,IAC7B2B,EAAO3B,GAAOuC,EAAOvC,IAGvB,OAAO2B,EDuEM,kBACH,yBAAK3B,IAAKH,EAAIR,UAAU,OAAOC,cAAY,QACzC,kBAAC,EAAD,iBAAcgD,EAAd,CAAoBrD,KAAM4B,EAAYyB,EAAKvD,uBAUpC","file":"component---src-pages-index-tsx-505fef4573c3bab4ea64.js","sourcesContent":["import { Frontmatter, Tag } from '@models';\nimport dayjs from 'dayjs';\nimport { Link } from 'gatsby';\nimport { useIntl } from 'gatsby-plugin-intl';\nimport React, { FC } from 'react';\n\nexport interface BlogItemProps {\n  frontmatter: Frontmatter;\n  excerpt: string;\n  tags: Tag[];\n}\n\nconst BlogItem: FC<BlogItemProps> = ({ frontmatter, excerpt, tags }) => {\n  const { locale, formatMessage } = useIntl();\n\n  return (\n    <div className='grid grid-cols-1'>\n      <Link\n        data-testid='title'\n        className='text-pink-700 text-xl md:text-2xl font-semibold'\n        to={`/${locale}${frontmatter.path}`}\n      >\n        {frontmatter.title}\n      </Link>\n      <div className='flex flex-col text-sm text-pink-700 text-opacity-75'>\n        <div className='mb-2 sm:mb-1 mr-3'>\n          {dayjs(frontmatter.date)\n            .locale(locale)\n            .format(formatMessage({ id: 'date_format' }))}\n        </div>\n        <div className='flex flex-row flex-wrap'>\n          {tags.map(tag => (\n            <div key={tag.key} className={`tag ${tag.className}`}>\n              {formatMessage({ id: tag.key })}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className='pt-1'>{excerpt}</div>\n    </div>\n  );\n};\n\nexport default BlogItem;\n","import BlogItem from '@components/blog-item';\nimport Layout from '@components/layout';\nimport SEO from '@components/seo';\nimport { Frontmatter, GithubData, SiteMetadata } from '@models';\nimport { graphql } from 'gatsby';\nimport { changeLocale, useIntl } from 'gatsby-plugin-intl';\nimport React, { FC, useCallback, useEffect } from 'react';\n\nexport interface HomeProps {\n  data: {\n    site: {\n      siteMetadata: SiteMetadata;\n    };\n    allMarkdownRemark: {\n      edges: {\n        node: {\n          id: string;\n          excerpt: string;\n          frontmatter: Frontmatter;\n        };\n      }[];\n    };\n    allGithubData: {\n      edges: {\n        node: GithubData;\n      }[];\n    };\n  };\n}\n\ntype SiteData = Pick<HomeProps['data'], 'site'>['site'];\ntype AllMarkdownRemark = Pick<HomeProps['data'], 'allMarkdownRemark'>['allMarkdownRemark'];\ntype AllGithubData = Pick<HomeProps['data'], 'allGithubData'>['allGithubData'];\n\nconst Home: FC<HomeProps> = ({ data }) => {\n  const { formatMessage, locale } = useIntl();\n  useEffect(() => {\n    changeLocale(locale);\n  }, [locale]);\n\n  const handleAvatarClick = useCallback(() => {\n    window.open(data.site.siteMetadata.githubUrl, '_blank');\n  }, []);\n\n  const getBlogTags = useCallback(\n    (frontmatter: Frontmatter) =>\n      data.site.siteMetadata.tags.filter(tag => frontmatter.tags.split(',').includes(tag.key)),\n    [data]\n  );\n\n  return (\n    <Layout>\n      <SEO />\n      <section className='flex'>\n        <div className='flex items-center pr-2'>\n          <img\n            className='p-0 m-0 w-10 h-10 md:w-12 md:h-12 rounded-full cursor-pointer'\n            src={data.allGithubData.edges[0].node.data.viewer.avatarUrl}\n            onClick={handleAvatarClick}\n            alt='avatar'\n          />\n        </div>\n        <div className='pl-2 grid grid-cols-1 grid-rows-2'>\n          <span className='text-xs md:text-sm'>\n            {formatMessage({ id: 'headline_1' })}\n            &nbsp;\n            <a\n              href={data.site.siteMetadata.githubUrl}\n              rel='noreferrer'\n              target='_blank'\n              className='underline text-pink-700'\n            >\n              {data.allGithubData.edges[0].node.data.viewer.name}\n            </a>\n          </span>\n          <span className='text-xs md:text-sm'>{formatMessage({ id: 'headline_2' })}</span>\n        </div>\n      </section>\n      <section className='grid grid-cols-1 mt-6'>\n        {data.allMarkdownRemark.edges\n          .sort((a, b) =>\n            [a.node.frontmatter.date, b.node.frontmatter.date].map(Date.parse).reduce((acc, cur) => cur - acc)\n          )\n          .map(({ node: { id, ...rest } }) => (\n            <div key={id} className='mb-6' data-testid='post'>\n              <BlogItem {...rest} tags={getBlogTags(rest.frontmatter)} />\n            </div>\n          ))}\n      </section>\n    </Layout>\n  );\n};\n\nexport default Home;\n\nexport const query = graphql`\n  query {\n    allGithubData {\n      edges {\n        node {\n          ...GithubData\n        }\n      }\n    }\n\n    site {\n      ...SiteMetadata\n    }\n\n    allMarkdownRemark(filter: {}) {\n      edges {\n        node {\n          id\n          excerpt\n          ...MarkdownFrontmatter\n        }\n      }\n    }\n  }\n`;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}