{"version":3,"sources":["webpack:///./src/components/blog-item.tsx","webpack:///./src/pages/index.tsx"],"names":["BlogItem","frontmatter","excerpt","tags","useIntl","locale","formatMessage","className","data-testid","to","path","title","dayjs","date","format","id","map","tag","key","Home","data","useEffect","changeLocale","handleAvatarClick","useCallback","window","open","site","siteMetadata","githubUrl","getBlogTags","filter","split","includes","src","allGithubData","edges","node","viewer","avatarUrl","onClick","alt","href","rel","target","name","allMarkdownRemark","sort","a","b","Date","parse","reduce","acc","cur","rest","query"],"mappings":"kTA2CeA,EA/BqB,SAAC,GAAmC,IAAjCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAAW,EACpCC,oBAA1BC,EAD8D,EAC9DA,OAAQC,EADsD,EACtDA,cAEhB,OACE,yBAAKC,UAAU,oBACb,kBAAC,OAAD,CACEC,cAAY,QACZD,UAAU,kDACVE,GAAE,IAAMJ,EAASJ,EAAYS,MAE5BT,EAAYU,OAEf,yBAAKJ,UAAU,uDACb,yBAAKA,UAAU,qBACZK,IAAMX,EAAYY,MAChBR,OAAOA,GACPS,OAAOR,EAAc,CAAES,GAAI,kBAEhC,yBAAKR,UAAU,2BACZJ,EAAKa,KAAI,SAAAC,GAAG,OACX,yBAAKC,IAAKD,EAAIC,IAAKX,UAAS,OAASU,EAAIV,WACtCD,EAAc,CAAES,GAAIE,EAAIC,YAKjC,yBAAKX,UAAU,QAAQL,K,wBCuDdiB,UA3Da,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAAW,EACNhB,oBAA1BE,EADgC,EAChCA,cAAeD,EADiB,EACjBA,OACvBgB,qBAAU,WACRC,uBAAajB,KACZ,CAACA,IAEJ,IAAMkB,EAAoBC,uBAAY,WACpCC,OAAOC,KAAKN,EAAKO,KAAKC,aAAaC,UAAW,YAC7C,IAEGC,EAAcN,uBAClB,SAACvB,GAAD,OACEmB,EAAKO,KAAKC,aAAazB,KAAK4B,QAAO,SAAAd,GAAG,OAAIhB,EAAYE,KAAK6B,MAAM,KAAKC,SAAShB,EAAIC,UACrF,CAACE,IAGH,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,6BAASb,UAAU,QACjB,yBAAKA,UAAU,0BACb,yBACEA,UAAU,gEACV2B,IAAKd,EAAKe,cAAcC,MAAM,GAAGC,KAAKjB,KAAKkB,OAAOC,UAClDC,QAASjB,EACTkB,IAAI,YAGR,yBAAKlC,UAAU,qCACb,0BAAMA,UAAU,sBACbD,EAAc,CAAES,GAAI,eADvB,IAGE,uBACE2B,KAAMtB,EAAKO,KAAKC,aAAaC,UAC7Bc,IAAI,aACJC,OAAO,SACPrC,UAAU,2BAETa,EAAKe,cAAcC,MAAM,GAAGC,KAAKjB,KAAKkB,OAAOO,OAGlD,0BAAMtC,UAAU,sBAAsBD,EAAc,CAAES,GAAI,kBAG9D,6BAASR,UAAU,yBAChBa,EAAK0B,kBAAkBV,MACrBW,MAAK,SAACC,EAAGC,GAAJ,MACJ,CAACD,EAAEX,KAAKpC,YAAYY,KAAMoC,EAAEZ,KAAKpC,YAAYY,MAAMG,IAAIkC,KAAKC,OAAOC,QAAO,SAACC,EAAKC,GAAN,OAAcA,EAAMD,QAE/FrC,KAAI,oBAAGqB,KAAQtB,EAAX,EAAWA,GAAOwC,E,oIAAlB,kBACH,yBAAKrC,IAAKH,EAAIR,UAAU,OAAOC,cAAY,QACzC,kBAAC,EAAD,iBAAc+C,EAAd,CAAoBpD,KAAM2B,EAAYyB,EAAKtD,uBAnDzD,IA6DauD,EAAQ","file":"component---src-pages-index-tsx-377f0500fd9be3c1a84c.js","sourcesContent":["import { Frontmatter, Tag } from '@models';\nimport dayjs from 'dayjs';\nimport { Link } from 'gatsby';\nimport { useIntl } from 'gatsby-plugin-intl';\nimport React, { FC } from 'react';\n\nexport interface BlogItemProps {\n  frontmatter: Frontmatter;\n  excerpt: string;\n  tags: Tag[];\n}\n\nconst BlogItem: FC<BlogItemProps> = ({ frontmatter, excerpt, tags }) => {\n  const { locale, formatMessage } = useIntl();\n\n  return (\n    <div className='grid grid-cols-1'>\n      <Link\n        data-testid='title'\n        className='text-pink-700 text-xl md:text-2xl font-semibold'\n        to={`/${locale}${frontmatter.path}`}\n      >\n        {frontmatter.title}\n      </Link>\n      <div className='flex flex-col text-sm text-pink-700 text-opacity-75'>\n        <div className='mb-2 sm:mb-0 mr-3'>\n          {dayjs(frontmatter.date)\n            .locale(locale)\n            .format(formatMessage({ id: 'date_format' }))}\n        </div>\n        <div className='flex flex-row flex-wrap'>\n          {tags.map(tag => (\n            <div key={tag.key} className={`tag ${tag.className}`}>\n              {formatMessage({ id: tag.key })}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className='pt-1'>{excerpt}</div>\n    </div>\n  );\n};\n\nexport default BlogItem;\n","import BlogItem from '@components/blog-item';\nimport Layout from '@components/layout';\nimport SEO from '@components/seo';\nimport { Frontmatter, GithubData, SiteMetadata } from '@models';\nimport { graphql } from 'gatsby';\nimport { changeLocale, useIntl } from 'gatsby-plugin-intl';\nimport React, { FC, useCallback, useEffect } from 'react';\n\nexport interface HomeProps {\n  data: {\n    site: {\n      siteMetadata: SiteMetadata;\n    };\n    allMarkdownRemark: {\n      edges: {\n        node: {\n          id: string;\n          excerpt: string;\n          frontmatter: Frontmatter;\n        };\n      }[];\n    };\n    allGithubData: {\n      edges: {\n        node: GithubData;\n      }[];\n    };\n  };\n}\n\ntype SiteData = Pick<HomeProps['data'], 'site'>['site'];\ntype AllMarkdownRemark = Pick<HomeProps['data'], 'allMarkdownRemark'>['allMarkdownRemark'];\ntype AllGithubData = Pick<HomeProps['data'], 'allGithubData'>['allGithubData'];\n\nconst Home: FC<HomeProps> = ({ data }) => {\n  const { formatMessage, locale } = useIntl();\n  useEffect(() => {\n    changeLocale(locale);\n  }, [locale]);\n\n  const handleAvatarClick = useCallback(() => {\n    window.open(data.site.siteMetadata.githubUrl, '_blank');\n  }, []);\n\n  const getBlogTags = useCallback(\n    (frontmatter: Frontmatter) =>\n      data.site.siteMetadata.tags.filter(tag => frontmatter.tags.split(',').includes(tag.key)),\n    [data]\n  );\n\n  return (\n    <Layout>\n      <SEO />\n      <section className='flex'>\n        <div className='flex items-center pr-2'>\n          <img\n            className='p-0 m-0 w-10 h-10 md:w-12 md:h-12 rounded-full cursor-pointer'\n            src={data.allGithubData.edges[0].node.data.viewer.avatarUrl}\n            onClick={handleAvatarClick}\n            alt='avatar'\n          />\n        </div>\n        <div className='pl-2 grid grid-cols-1 grid-rows-2'>\n          <span className='text-xs md:text-sm'>\n            {formatMessage({ id: 'headline_1' })}\n            &nbsp;\n            <a\n              href={data.site.siteMetadata.githubUrl}\n              rel='noreferrer'\n              target='_blank'\n              className='underline text-pink-700'\n            >\n              {data.allGithubData.edges[0].node.data.viewer.name}\n            </a>\n          </span>\n          <span className='text-xs md:text-sm'>{formatMessage({ id: 'headline_2' })}</span>\n        </div>\n      </section>\n      <section className='grid grid-cols-1 mt-6'>\n        {data.allMarkdownRemark.edges\n          .sort((a, b) =>\n            [a.node.frontmatter.date, b.node.frontmatter.date].map(Date.parse).reduce((acc, cur) => cur - acc)\n          )\n          .map(({ node: { id, ...rest } }) => (\n            <div key={id} className='mb-6' data-testid='post'>\n              <BlogItem {...rest} tags={getBlogTags(rest.frontmatter)} />\n            </div>\n          ))}\n      </section>\n    </Layout>\n  );\n};\n\nexport default Home;\n\nexport const query = graphql`\n  query {\n    allGithubData {\n      edges {\n        node {\n          ...GithubData\n        }\n      }\n    }\n\n    site {\n      ...SiteMetadata\n    }\n\n    allMarkdownRemark(filter: {}) {\n      edges {\n        node {\n          id\n          excerpt\n          ...MarkdownFrontmatter\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}